# coding: utf-8

def part_main_parser():
    # Из существующего MIB
    mib_extract_fname = 'prdStatus-extract-mib.txt'
    mib_extract = file_as_list(mib_extract_fname)
    mib_map = {}
    for record in mib_extract:
        if '?' not in record:
            splitted = record.split(' ') 
            mib_map[int(splitted[0])] = splitted[1]
    
    # Выделеные данные из пакета полученного по каналу
    channal_extract = file_as_list('main-params-extract-static.txt')
    for record in channal_extract:
        splitted = record.split(' ') 
        idx = int(splitted[0])
        if idx in mib_map:
            print splitted[0], splitted[2], splitted[1], splitted[2], '@DESCRIPTION <> ', mib_map[idx]
        else:
            print splitted[0], splitted[2], splitted[1], splitted[2], '@DESCRIPTION <> ', 'NO_USED'
            
        # Печать перекодировщика
        #print "mapper["+splitted[0]+"] = '"+splitted[1]+"'"
        
def left_parser():
    request = 'AJX_LFT RD'
    #params = get_params(request)
    #print params
    
    # Из существующего MIB
    mib_extract_fname = 'prdConf-extract-mib.txt'
    mib_extract = file_as_list(mib_extract_fname)
    mib_map = {}
    for record in mib_extract:
        if '?' not in record:
            splitted = record.split(' ') 
            mib_map[int(splitted[0])] = splitted[1]
    
    # Выделеные данные из пакета полученного по каналу
    channal_extract = file_as_list('left-extract.txt')
    for record in channal_extract:
        splitted = record.split(' ') 
        idx = int(splitted[0])
        if idx in mib_map:
            print splitted[0], splitted[2], splitted[1], splitted[2], '@DESCRIPTION <> ', mib_map[idx]
        else:
            print splitted[0], splitted[2], splitted[1], splitted[2], '@DESCRIPTION <> ', 'NO_USED'
            
        # Печать перекодировщика
        #print "mapper["+splitted[0]+"] = '"+splitted[1]+"'"
        
        
def durty_process_pab_source_data():
    ''' Формирует файл-шаблон'''
    template = io.get_utf8_template()
    template['name'] = 'pab1.htm'  
    named_oids = {}
    def printer(line):
        if 'id' in line and 'text' in line:
            name = line.lstrip().split('"')[3]
            editable = _all_first_item_to_upper_and_remove_spaces(name.replace('_', ' '))
            editable = 'sys'+editable+'  '+'@DESCRIPTION'
            named_oids[name] = editable
            
    content = io.file2list(template)

    map(printer, content)

    request = 'PAB_1ST RD'
    params = get_params(request)
    #print params
    
    # После обработки js-скрипта страницы блока усилителей
    # Номер в массиве и id на странице
    # Нумерация с нуля!
    # ['', 'conn=1', 'PBOO=2', 'PBLc=3',...
    keys = [2, "pab_onof", 3, "pab_lck", 4, "pab_da", 6, "pab_st", 11, "frw_val", 9, "inpow_val", 10, "outpow_val", 20, "pp_temre", 16, "pp_agc_st", 17, "pp_15_st", 18, "pre_vt1_val", 19, "pre_vt2_val", 21, "pre_mip_val", 22, "pre_att_val", 23, "pre_phs_val", 24, "pre_ref_val", 30+5, "pa1_vt1_val", 31+5, "pa1_vt2_val", 32+5, "pa1_tem_val", 33+5, "pa1_mip_val", 38+5, "pa2_vt1_val", 39+5, "pa2_vt2_val", 40+5, "pa2_tem_val", 41+5, "pa2_mip_val", 46+5, "pa3_vt1_val", 47+5, "pa3_vt2_val", 48+5, "pa3_tem_val", 49+5, "pa3_mip_val", 54+5, "pa4_vt1_val", 55+5, "pa4_vt2_val", 56+5, "pa4_tem_val", 57+5, "pa4_mip_val"]
    
    exist_mib_data = [
                      'STATE','STATE','STATE','STATE',
        'iBUM1-KBV',
        'iBUM1-InpPower',
        'iBUM1-OutPower',
        'iUP1-Temperature',
        'STATE',
        'STATE',
        'iUP1-CurrVT1',
        'iUP1-CurrVT2',
        'iUP1-UMip',
        'iUP1-UAtt',
        'iUP1-UFase',
        'iUP1-UReference',
        'iUM11-CurrVT1',
        'iUM11-CurrVT2',
        'iUM11-Temperature',
        'iUM11-UMip',
        'iUM12-CurrVT1',
        'iUM12-CurrVT2',
        'iUM12-Temperature',
        'iUM12-UMip',
        'iUM13-CurrVT1',
        'iUM13-CurrVT2',
        'iUM13-Temperature',
        'iUM13-UMip',
        'iUM14-CurrVT1',
        'iUM14-CurrVT2',
        'iUM14-Temperature',
        'iUM14-UMip']
    
    for i in range(len(keys)/2):
        key = keys[i*2]
        value = keys[i*2+1]
        print key, value, params[key].split('=')[0], named_oids[value], '<>', exist_mib_data[i]
        
        
            
def generate_any():
    template = 'pab_full.py'
    mib_name = 'TRANSMITTER-MIB'
    cash_file = read_template_file(template)
        
    #read_mapper = []
    #oids_test_names = {}
    #use_read_mapper = {}
    #top_oid = 'STATENAME' 
    i = 1
    
    import sys
    print '#@Autogenerated by ', sys.argv
    for oid in cash_file:
        name, key, pos, note, oid_name = oid
        
        method_name = 'get_'+to_name(name)
        print "MibObject('"+mib_name+"', '"+oid_name+"', self."+method_name+", None),"

        #method = '    def '+method_name+'(self):\r\n        return self.access_map_["'+key+'"]\r\n'
        #print method
        
        #one_line = 'mapper['+str(pos)+'] = \''+key+'\''
        #print one_line
        #read_mapper.append(one_line)
        
        # Generate MIB
        """for i in range(10):
            idx = str(i+1)
            print '-- File: PAB'+idx
            INT_STRING_TEMPLATE = '  OBJECT-TYPE\r\n\tSYNTAX  Integer32\r\n\tMAX-ACCESS  read-only\r\n\tSTATUS  current\r\n\tDESCRIPTION\r\n\t'
            one_record = name+str(i+1)+INT_STRING_TEMPLATE+'\t"'+note+'"\r\n\t::= { '+top_oid+' '+str(i)+' }\r\n'
            print one_record.replace('\t', '  ')
            #print name+str(i+1), 'Integer32, ', '-- '+name+'s'
            """
        #break
        #i += 1
    print '#@Autogenerated by ', sys.argv
    
def generate_left():
    template = 'left_full.py'
    mib_name = 'TRANSMITTER-MIB'
    cash_file = read_template_file(template)

    import sys
    print '#@Autogenerated by ', sys.argv
    for oid in cash_file:
        name, key, pos, note, oid_name = oid

        if 'NO_USED' in oid_name:
            continue
        
        method_name = 'get_'+to_name(name)
        print "MibObject('"+mib_name+"', '"+oid_name+"', self."+method_name+", None),"

        method = '    def '+method_name+'(self):\r\n        return self.access_map_["'+key+'"]\r\n'
        #print method
    print '#@Autogenerated by ', sys.argv