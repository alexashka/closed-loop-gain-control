;    title "Подпрограмма вычисления CRC8 для микроконтроллеров PIC16."
;
#include "../headers/user_modes.inc"
        radix   dec
;
#define CRC_POLY 0x18
;
;               *********************************************
;               *                                           *
;               *                 Переменные                *
;               *                                           *
;               *********************************************
;
       Dtat2_hot		idata_acs;     udata_ovr	+310110
;
ByteCount   res     1       ; Счетчик байт данных
BitCount    res     1       ; Счетчик бит в байте
DataByte    res     1       ; Байт данных
CRC         res     1       ; Временное значение CRC
;
;   *********************************************************************
;   *                                                                   *
;   *                   Процедура: CalcCRC8                             *
;   *                                                                   *
;   *    Процессор: PIC16.                                              *
;   *    Параметры: W = число байт данных.                              *
;   *               FSR = адрес буфера данных.                          *
;   *               IRB = банки буфера данных.                          *
;   *      Возврат: W = CRC8.                                           *
;   *     Описание: Вычисление CRC8 основано на циклическом полиноме    *
;   *               вида X8+X5+X4+X1 (см. документ DALLAS AN27). CRC8   *
;   *               вычисляется для указанного в W числа байтов данных, *
;   *               расположенных в буфере, находящемся в памяти данных *
;   *               по адресу, указанному в регистре FSR в банке,       *
;   *               определяемом битом IRB. Результат возвращается в W. *
;   *               Процедура написана в перемещаемых кодах и может     *
;   *               быть размещена в любой странице памяти программ.    *
;   *               Локальные переменные размещаются в оверлейной       *
;   *               секции для любого банка памяти данных.              *
;   *      История: 26.11.2006 - числовая маска CRC заменена            *
;   *               определением "#define CRC_POLY 0x18".               *
;   *                                                                   *
;   *********************************************************************
;
        code
;
CalcCRC8:
        global  CalcCRC8
;
        banksel ByteCount       ; Установка рабочего банка регистров
        movwf   ByteCount       ; Сохранение длины сообщения
        movlw   0x00            ; Инициализация CRC было FF !!! -для опред нулевой последовательности данных
        movwf   CRC
CalcNextByte                    ; Внешний цикл по байтам данных
        movlw   8               ; Инициализация внутреннего цикла для 8
        movwf   BitCount        ;   бит в счетчике бит
        movf   INDF0,w            ; Выборка очередного байта данных
        movwf   DataByte        ;   и его запоминание
CalcNextBit                     ; Внутренний цикл по битам байта
        movf   CRC,w             ; Выделение младшего бита CRC
        andlw   0x01
        xorwf   DataByte, F     ; DataByte.0 = новое CRC.0
        btfss   DataByte, 0     ; Переход, если надо инвертировать биты 4 и 5 в CRC
        goto    ShiftCRC        ; Переход, если не надо инвертировать биты 4 и 5 в CRC
;
        movlw   CRC_POLY        ; Инвертирование битов 4 и 5 в CRC
        xorwf   CRC, F
ShiftCRC
        rrcf     DataByte, F     ; Сдвиг всей CRC
        rrcf     CRC, F
;
        decfsz  BitCount, F     ; Декремент и проверка счетчика бит
        goto    CalcNextBit     ; Цикл, если не все биты байта обработаны
;
        incf    FSR0L, F          ; Перемещение указателя на следующий байт
        decfsz  ByteCount, F    ; Декремент и проверка счетчика байт
        goto    CalcNextByte    ; Цикл, если не все байты данных обработаны
;
        movf   CRC,w             ; Возврат результата через W
        return
;

;
        end
