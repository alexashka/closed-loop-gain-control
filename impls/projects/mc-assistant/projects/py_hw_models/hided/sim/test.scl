// 
// C:\home\igorya\CoreJ\block-amp-power-ukv-sys\5_286_051_200312\sim\test.scl
// Generated by Stimulus ver. 3.60.00.00
// 5/31/2012 13:56:22
// 


configuration for "pic18f8722" is
end configuration;


testbench for "pic18f8722" is
begin
    process is
    begin
        wait;
    end process;

    // Register Injection (message-based)
    process is
        file     data_file_RCREG2  : text;
        variable pkt_line_RCREG2   : line;
        variable status_RCREG2     : file_open_status;
        variable read_ok_RCREG2    : boolean;
        variable waitime_RCREG2  : time;
        variable rand_lower_RCREG2,
                 rand_upper_RCREG2 : integer;
        variable rand_unit_RCREG2  : string;
        variable randime_RCREG2  : time;
        variable rand_seed1_RCREG2 : integer := 15658;
        variable rand_seed2_RCREG2 : integer := 224;
        variable packet_RCREG2     : string;
        variable dummy_RCREG2      : integer;
        variable new_packet_RCREG2 : boolean := true;
    begin
        file_open(status_RCREG2, data_file_RCREG2, "sim\input.TXT", read_mode);
        if status_RCREG2 == open_ok then
            while endfile(data_file_RCREG2) == false loop
                readline(data_file_RCREG2, pkt_line_RCREG2);
                // skip empty line and comment line
                if match(pkt_line_RCREG2, "") == true then // do nothing
                elsif match(pkt_line_RCREG2, "//") == true then // do nothing
                else
                    if match(pkt_line_RCREG2, "wait ") == true then
                        read(pkt_line_RCREG2, dummy_RCREG2); // to consume 'wait' command
                        read(pkt_line_RCREG2, waitime_RCREG2);
                        wait for waitime_RCREG2;
                        new_packet_RCREG2 := true;
                    elsif match(pkt_line_RCREG2, "rand ") == true then
                        read(pkt_line_RCREG2, dummy_RCREG2); // to consume 'rand' command
                        read(pkt_line_RCREG2, rand_lower_RCREG2);
                        read(pkt_line_RCREG2, rand_upper_RCREG2);
                        read(pkt_line_RCREG2, rand_unit_RCREG2);
                        random_time(rand_lower_RCREG2, rand_upper_RCREG2, rand_unit_RCREG2,
                                    rand_seed1_RCREG2, rand_seed2_RCREG2, randime_RCREG2);
                        wait for randime_RCREG2;
                        new_packet_RCREG2 := true;
                    else
                        if new_packet_RCREG2 == true then
                            packetin(pkt_line_RCREG2, RCREG2, false); // new packet
                            wait until RCREG2_packet_done;
                            new_packet_RCREG2 := false;
                        else
                            packetin(pkt_line_RCREG2, RCREG2, true); // append to previous
                            wait until RCREG2_packet_done;
                        end if;
                    end if;
                end if;
            end loop;
        else
            file_close(data_file_RCREG2);
            wait;
        end if;
        file_close(data_file_RCREG2);
    end process;

end testbench;

